spring:
    application:
        name: stockleague-backend

    config:
        import: optional:file:.env[.properties]


    profiles:
        active: ${SPRING_PROFILES_ACTIVE:docker}

    datasource:
        url: ${SPRING_DATASOURCE_URL}
        username: ${SPRING_DATASOURCE_USERNAME}
        password: ${SPRING_DATASOURCE_PASSWORD}
        driver-class-name: org.postgresql.Driver
        hikari:
            connection-timeout: 30000
            maximum-pool-size: 10
            minimum-idle: 2
            idle-timeout: 600000
            max-lifetime: 1800000

    jpa:
        hibernate:
            ddl-auto: validate
        show-sql: false
        properties:
            hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.PostgreSQLDialect

    flyway:
        enabled: false
        locations: classpath:db/migration
        baseline-on-migrate: true
        validate-on-migrate: true
        out-of-order: false
        connect-retries: 5

    data:
        redis:
            host: ${SPRING_REDIS_HOST}
            port: 6379
            password: ${SPRING_REDIS_PASSWORD}


jwt:
    secret: ${JWT_SECRET_KEY}
    access-token-validity: 1800000       # 30분 = 1000 * 60 * 30
    refresh-token-validity: 2592000000   # 30일 = 1000 * 60 * 60 * 24 * 30

server:
    port: 8080
    servlet:
        encoding:
            charset: UTF-8
            enabled: true
            force: true

cors:
    allowed-origins: ${ALLOWED_ORIGINS}

kakao:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    redirect-uri: ${KAKAO_REDIRECT_URI}
    token-uri: https://kauth.kakao.com/oauth/token
    user-info-uri: https://kapi.kakao.com/v2/user/me
    auth-base-url: https://kauth.kakao.com
    api-base-url: https://kapi.kakao.com

logging:
    level:
        # 전체 기본은 INFO
        root: INFO

        # Spring 전반은 경고
        org.springframework: WARN
        org.springframework.web: WARN

        # ▶ 요청 흐름/예외 핵심 포인트만 INFO
        org.springframework.web.servlet.DispatcherServlet: INFO            # "Completed 200 OK" 등 요청/응답 요약
        org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: INFO  # @ExceptionHandler 매핑
        org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: INFO     # 스프링 기본 예외 처리
        org.springframework.web.bind: INFO                               # 바인딩/Validation 오류 원인
        org.springframework.http.converter: WARN                         # 바디 컨버팅 문제

        # 보안 흐름(401/403 원인 파악)
        org.springframework.security: INFO
        org.springframework.security.web.access: INFO
        org.springframework.security.authentication: INFO
        org.springframework.security.oauth2: INFO

        # WebSocket은 계속 억제
        org.springframework.web.socket: WARN
        org.springframework.web.servlet.handler: WARN
        org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: WARN
        org.springframework.web.socket.handler: WARN
        org.springframework.web.socket.config: WARN
        org.springframework.web.socket.sockjs: WARN
        org.springframework.web.socket.messaging: WARN
        org.springframework.messaging: WARN
        org.springframework.messaging.simp: WARN
        org.springframework.messaging.simp.stomp: WARN
        org.springframework.messaging.simp.user: WARN
        org.springframework.messaging.support: WARN
        org.springframework.messaging.converter: WARN
        org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler: WARN
        org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry: WARN
        org.springframework.messaging.simp.user.DefaultSimpUserRegistry: WARN

        # Hibernate: SQL은 계속 끄되, DB 예외만 보이도록
        org.hibernate.SQL: OFF
        org.hibernate.type: OFF
        org.hibernate.type.descriptor.sql: OFF
        org.hibernate.type.descriptor.jdbc: OFF
        org.hibernate.orm.jdbc.bind: OFF
        org.hibernate.stat: OFF
        org.hibernate: WARN
        # ▶ 제일 중요한 포인트: 실제 SQL 오류 원인(제약조건 위반 등)
        org.hibernate.engine.jdbc.spi.SqlExceptionHelper: ERROR

        # 톰캣 잡음 억제
        org.apache.coyote.http11.Http11Processor: ERROR
        org.apache.catalina.connector: ERROR

        # 정적리소스/기본 에러컨트롤러 억제
        org.springframework.web.servlet.resource: ERROR
        org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: OFF

        # 프로젝트 로거
        com.stockleague.backend: INFO
        # 컨트롤러는 디버깅 때만 한 단계 올려도 좋아요
        com.stockleague.backend..controller: DEBUG
        com.stockleague.backend.global.exception: INFO
        com.stockleague.backend.openapi.parser.KisWebSocketResponseParser: INFO
        com.stockleague.backend.infra.redis.StockPriceRedisService: INFO
        com.stockleague.backend.infra.redis.StockOrderBookRedisService: INFO
openapi:
    auth-url: https://openapivts.koreainvestment.com:29443
    appKey: ${OPENAPI_API_KEY}
    appSecret: ${OPENAPI_API_SECRET}
    grant-type: client_credentials
    scope: oob

management:
    endpoints:
        web:
            exposure:
                include: health,info
    endpoint:
        health:
            probes:
                enabled: true